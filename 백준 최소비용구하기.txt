import sys
import heapq

n=int(input())
m=int(input())
inf=sys.maxsize
graph=[[] for _ in range(n+1)]
d=[inf]*(n+1)
trace=[0]*(n+1)
for _ in range(m):
    a,b,c=map(int,input().split())
    graph[a].append((b,c))

start,end=map(int,input().split())



def dik(s):
    q=[]
    heapq.heappush(q,(0,s))
    d[s]=0

    while q:
        weight,now =heapq.heappop(q)

        if d[now]<weight:
            continue

        for next,wei in graph[now]:
            new_wei=weight+wei
            if d[next]>new_wei:
                d[next]=new_wei
                trace[next]=now
                heapq.heappush(q,(new_wei,next))
dik(start)
print(d[end])

path=[end]
now=end

while now!=start:
    now=trace[now]
    path.append(now)

path.reverse()
print(len(path))
print(" ".join(map(str, path)))